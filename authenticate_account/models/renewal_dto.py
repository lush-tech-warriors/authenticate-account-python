# coding: utf-8

"""
    Authenticate Platform Account API

    Through this API you can authenticate user credentials and thereby gain access to the available suite of APIs  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: platform-support@authenticateis.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RenewalDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expired_jwt': 'str',
        'renewal_token': 'str'
    }

    attribute_map = {
        'expired_jwt': 'expiredJwt',
        'renewal_token': 'renewalToken'
    }

    def __init__(self, expired_jwt=None, renewal_token=None):  # noqa: E501
        """RenewalDto - a model defined in Swagger"""  # noqa: E501
        self._expired_jwt = None
        self._renewal_token = None
        self.discriminator = None
        self.expired_jwt = expired_jwt
        self.renewal_token = renewal_token

    @property
    def expired_jwt(self):
        """Gets the expired_jwt of this RenewalDto.  # noqa: E501

        The expired JWT that is being refreshed  # noqa: E501

        :return: The expired_jwt of this RenewalDto.  # noqa: E501
        :rtype: str
        """
        return self._expired_jwt

    @expired_jwt.setter
    def expired_jwt(self, expired_jwt):
        """Sets the expired_jwt of this RenewalDto.

        The expired JWT that is being refreshed  # noqa: E501

        :param expired_jwt: The expired_jwt of this RenewalDto.  # noqa: E501
        :type: str
        """
        if expired_jwt is None:
            raise ValueError("Invalid value for `expired_jwt`, must not be `None`")  # noqa: E501

        self._expired_jwt = expired_jwt

    @property
    def renewal_token(self):
        """Gets the renewal_token of this RenewalDto.  # noqa: E501

        The previously supplied renewal token  # noqa: E501

        :return: The renewal_token of this RenewalDto.  # noqa: E501
        :rtype: str
        """
        return self._renewal_token

    @renewal_token.setter
    def renewal_token(self, renewal_token):
        """Sets the renewal_token of this RenewalDto.

        The previously supplied renewal token  # noqa: E501

        :param renewal_token: The renewal_token of this RenewalDto.  # noqa: E501
        :type: str
        """
        if renewal_token is None:
            raise ValueError("Invalid value for `renewal_token`, must not be `None`")  # noqa: E501

        self._renewal_token = renewal_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RenewalDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RenewalDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
